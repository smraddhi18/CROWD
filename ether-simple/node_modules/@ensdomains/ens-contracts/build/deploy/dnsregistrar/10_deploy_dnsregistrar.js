"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hardhat_1 = require("hardhat");
const func = async function (hre) {
    const { getNamedAccounts, deployments } = hre;
    const { deploy } = deployments;
    const { deployer, owner } = await getNamedAccounts();
    const registry = await hre.deployments.get('ENSRegistry');
    const dnssec = await hre.deployments.get('DNSSECImpl');
    const resolver = await hre.deployments.get('OffchainDNSResolver');
    const oldregistrar = await hre.deployments.getOrNull('DNSRegistrar');
    const root = await hardhat_1.ethers.getContract('Root');
    const publicSuffixList = await deploy('TLDPublicSuffixList', {
        from: deployer,
        args: [],
        log: true,
    });
    const tx = await deploy('DNSRegistrar', {
        from: deployer,
        args: [
            (oldregistrar === null || oldregistrar === void 0 ? void 0 : oldregistrar.address) || '0x0000000000000000000000000000000000000000',
            resolver.address,
            dnssec.address,
            publicSuffixList.address,
            registry.address,
        ],
        log: true,
    });
    console.log(`Deployed DNSRegistrar to ${tx.address}`);
    const tx2 = await root
        .connect(await hardhat_1.ethers.getSigner(owner))
        .setController(tx.address, true);
    console.log(`Set DNSRegistrar as controller of Root (${tx2.hash})`);
    await tx2.wait();
};
func.tags = ['DNSRegistrar'];
func.dependencies = ['registry', 'dnssec-oracle', 'OffchainDNSResolver', 'Root'];
exports.default = func;
