"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/lib/utils");
const hardhat_1 = require("hardhat");
const { makeInterfaceId } = require('@openzeppelin/test-helpers');
function computeInterfaceId(iface) {
    return makeInterfaceId.ERC165(Object.values(iface.functions).map((frag) => frag.format('sighash')));
}
const func = async function (hre) {
    const { getNamedAccounts, deployments, network } = hre;
    const { deploy } = deployments;
    const { deployer } = await getNamedAccounts();
    const registry = await hardhat_1.ethers.getContract('ENSRegistry');
    const controller = await hardhat_1.ethers.getContract('ETHRegistrarController');
    const bulkRenewal = await deploy('StaticBulkRenewal', {
        from: deployer,
        args: [controller.address],
        log: true,
    });
    // Only attempt to make resolver etc changes directly on testnets
    if (network.name === 'mainnet')
        return;
    const artifact = await deployments.getArtifact('IBulkRenewal');
    const interfaceId = computeInterfaceId(new utils_1.Interface(artifact.abi));
    const provider = new hardhat_1.ethers.providers.StaticJsonRpcProvider(hardhat_1.ethers.provider.connection.url, {
        ...hardhat_1.ethers.provider.network,
        ensAddress: registry.address,
    });
    const resolver = await provider.getResolver('eth');
    if (resolver === null) {
        console.log('No resolver set for .eth; not setting interface for BulkRenewal');
        return;
    }
    const resolverContract = await hardhat_1.ethers.getContractAt('PublicResolver', resolver.address);
    const tx = await resolverContract.setInterface(hardhat_1.ethers.utils.namehash('eth'), interfaceId, bulkRenewal.address);
    console.log(`Setting BulkRenewal interface ID ${interfaceId} on .eth resolver (tx: ${tx.hash})...`);
    await tx.wait();
    return true;
};
func.id = 'bulk-renewal';
func.tags = ['BulkRenewal'];
func.dependencies = ['registry'];
exports.default = func;
