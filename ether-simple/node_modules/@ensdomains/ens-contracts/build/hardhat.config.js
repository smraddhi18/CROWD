"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.archivedDeploymentPath = void 0;
const child_process_1 = require("child_process");
require("@nomiclabs/hardhat-ethers");
require("@nomiclabs/hardhat-solhint");
require("@nomiclabs/hardhat-truffle5");
require("@nomiclabs/hardhat-waffle");
const dotenv_1 = __importDefault(require("dotenv"));
require("hardhat-abi-exporter");
require("hardhat-contract-sizer");
require("hardhat-deploy");
require("hardhat-gas-reporter");
const util_1 = require("util");
const exec = (0, util_1.promisify)(child_process_1.exec);
// hardhat actions
require("./tasks/accounts");
require("./tasks/archive_scan");
require("./tasks/save");
require("./tasks/seed");
// Load environment variables from .env file. Suppress warnings using silent
// if this file is missing. dotenv will never modify any environment variables
// that have already been set.
// https://github.com/motdotla/dotenv
dotenv_1.default.config({ debug: false });
let real_accounts = undefined;
if (process.env.DEPLOYER_KEY) {
    real_accounts = [
        process.env.DEPLOYER_KEY,
        process.env.OWNER_KEY || process.env.DEPLOYER_KEY,
    ];
}
// circular dependency shared with actions
exports.archivedDeploymentPath = './deployments/archive';
const config = {
    networks: {
        hardhat: {
            saveDeployments: false,
            tags: ['test', 'legacy', 'use_root'],
            allowUnlimitedContractSize: false,
        },
        localhost: {
            url: 'http://127.0.0.1:8545',
            saveDeployments: false,
            tags: ['test', 'legacy', 'use_root'],
        },
        rinkeby: {
            url: `https://rinkeby.infura.io/v3/${process.env.INFURA_API_KEY}`,
            tags: ['test', 'legacy', 'use_root'],
            chainId: 4,
            accounts: real_accounts,
        },
        ropsten: {
            url: `https://ropsten.infura.io/v3/${process.env.INFURA_API_KEY}`,
            tags: ['test', 'legacy', 'use_root'],
            chainId: 3,
            accounts: real_accounts,
        },
        goerli: {
            url: `https://goerli.infura.io/v3/${process.env.INFURA_API_KEY}`,
            tags: ['test', 'legacy', 'use_root'],
            chainId: 5,
            accounts: real_accounts,
        },
        sepolia: {
            url: `https://sepolia.infura.io/v3/${process.env.INFURA_API_KEY}`,
            tags: ['test', 'legacy', 'use_root'],
            chainId: 11155111,
            accounts: real_accounts,
        },
        mainnet: {
            url: `https://mainnet.infura.io/v3/${process.env.INFURA_API_KEY}`,
            tags: ['legacy', 'use_root'],
            chainId: 1,
            accounts: real_accounts,
        },
    },
    mocha: {},
    solidity: {
        compilers: [
            {
                version: '0.8.17',
                settings: {
                    optimizer: {
                        enabled: true,
                        runs: 1300,
                    },
                },
            },
            // for DummyOldResolver contract
            {
                version: '0.4.11',
                settings: {
                    optimizer: {
                        enabled: true,
                        runs: 200,
                    },
                },
            },
        ],
    },
    abiExporter: {
        path: './build/contracts',
        runOnCompile: true,
        clear: true,
        flat: true,
        except: [
            'Controllable$',
            'INameWrapper$',
            'SHA1$',
            'Ownable$',
            'NameResolver$',
            'TestBytesUtils$',
            'legacy/*',
        ],
        spacing: 2,
        pretty: true,
    },
    namedAccounts: {
        deployer: {
            default: 0,
        },
        owner: {
            default: 0,
        },
    },
    external: {
        contracts: [
            {
                artifacts: [exports.archivedDeploymentPath],
            },
        ],
    },
};
exports.default = config;
